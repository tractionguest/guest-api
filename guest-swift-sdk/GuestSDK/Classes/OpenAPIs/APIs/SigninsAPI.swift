//
// SigninsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class SigninsAPI {
    /**

     - parameter signinCreateParams: (body) Params for creating a Signin can omit certain fields if a &#x60;registration_id&#x60; is present. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func createSignin(signinCreateParams: SigninCreateParams? = nil, apiResponseQueue: DispatchQueue = GuestSDKAPI.apiResponseQueue, completion: @escaping ((_ result: Result<Signin, Error>) -> Void)) {
        createSigninWithRequestBuilder(signinCreateParams: signinCreateParams).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     - POST /signins
     - Creates a Signin
     - :
       - type: openIdConnect
       - name: TractionGuestAuth
     - parameter signinCreateParams: (body) Params for creating a Signin can omit certain fields if a &#x60;registration_id&#x60; is present. (optional)
     - returns: RequestBuilder<Signin> 
     */
    open class func createSigninWithRequestBuilder(signinCreateParams: SigninCreateParams? = nil) -> RequestBuilder<Signin> {
        let path = "/signins"
        let URLString = GuestSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signinCreateParams)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Signin>.Type = GuestSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a Signin
     
     - parameter signinId: (path)  
     - parameter include: (query) A list of comma-separated related models to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getSignin(signinId: String, include: String? = nil, apiResponseQueue: DispatchQueue = GuestSDKAPI.apiResponseQueue, completion: @escaping ((_ result: Result<SigninDetail, Error>) -> Void)) {
        getSigninWithRequestBuilder(signinId: signinId, include: include).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Get a Signin
     - GET /signins/{signin_id}
     - Gets the details of a single instance of a `Signin`.
     - :
       - type: openIdConnect
       - name: TractionGuestAuth
     - parameter signinId: (path)  
     - parameter include: (query) A list of comma-separated related models to include (optional)
     - returns: RequestBuilder<SigninDetail> 
     */
    open class func getSigninWithRequestBuilder(signinId: String, include: String? = nil) -> RequestBuilder<SigninDetail> {
        var path = "/signins/{signin_id}"
        let signinIdPreEscape = "\(APIHelper.mapValueToPathItem(signinId))"
        let signinIdPostEscape = signinIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{signin_id}", with: signinIdPostEscape, options: .literal, range: nil)
        let URLString = GuestSDKAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<SigninDetail>.Type = GuestSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter querySort
     */
    public enum QuerySort_getSignins: String, CaseIterable {
        case desc = "signin_timestamp_desc"
        case asc = "signin_timestamp_asc"
    }

    /**
     List All Signins
     
     - parameter locationIds: (query) A comma separated list of Location IDs (optional)
     - parameter withColours: (query) A comma separated list of case-insensitive colour values. i.e., &#x60;red&#x60;, &#x60;green&#x60;, &#x60;yellow&#x60;, and &#x60;orange&#x60; (optional)
     - parameter query: (query) Allows you to query by &#x60;company&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, and &#x60;location_name&#x60; (optional)
     - parameter withAcknowledged: (query) Filters to all those &#x60;Signin&#x60;s that have, or have not been acknowledged (optional)
     - parameter withSignedIn: (query) Filters to all &#x60;Signin&#x60;s that are, or are not currently signed out. (optional)
     - parameter signinBefore: (query) Filters results to all those *before* the provided datetime (optional)
     - parameter signinAfter: (query) Filters results to all those *after* the provided datetime (optional)
     - parameter limit: (query) Limits the results to a specified number, defaults to 50 (optional)
     - parameter offset: (query) Offsets the results to a specified number, defaults to 0 (optional)
     - parameter querySort: (query) Allows you to override ordering by most relevant results when querying (optional)
     - parameter include: (query) A list of comma-separated related models to include (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func getSignins(locationIds: String? = nil, withColours: String? = nil, query: String? = nil, withAcknowledged: Bool? = nil, withSignedIn: Bool? = nil, signinBefore: Date? = nil, signinAfter: Date? = nil, limit: Int? = nil, offset: Int? = nil, querySort: QuerySort_getSignins? = nil, include: String? = nil, apiResponseQueue: DispatchQueue = GuestSDKAPI.apiResponseQueue, completion: @escaping ((_ result: Result<PaginatedSigninsList, Error>) -> Void)) {
        getSigninsWithRequestBuilder(locationIds: locationIds, withColours: withColours, query: query, withAcknowledged: withAcknowledged, withSignedIn: withSignedIn, signinBefore: signinBefore, signinAfter: signinAfter, limit: limit, offset: offset, querySort: querySort, include: include).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     List All Signins
     - GET /signins
     - Gets a list of all `Signin` entities.
     - :
       - type: openIdConnect
       - name: TractionGuestAuth
     - parameter locationIds: (query) A comma separated list of Location IDs (optional)
     - parameter withColours: (query) A comma separated list of case-insensitive colour values. i.e., &#x60;red&#x60;, &#x60;green&#x60;, &#x60;yellow&#x60;, and &#x60;orange&#x60; (optional)
     - parameter query: (query) Allows you to query by &#x60;company&#x60;, &#x60;email&#x60;, &#x60;first_name&#x60;, &#x60;last_name&#x60;, and &#x60;location_name&#x60; (optional)
     - parameter withAcknowledged: (query) Filters to all those &#x60;Signin&#x60;s that have, or have not been acknowledged (optional)
     - parameter withSignedIn: (query) Filters to all &#x60;Signin&#x60;s that are, or are not currently signed out. (optional)
     - parameter signinBefore: (query) Filters results to all those *before* the provided datetime (optional)
     - parameter signinAfter: (query) Filters results to all those *after* the provided datetime (optional)
     - parameter limit: (query) Limits the results to a specified number, defaults to 50 (optional)
     - parameter offset: (query) Offsets the results to a specified number, defaults to 0 (optional)
     - parameter querySort: (query) Allows you to override ordering by most relevant results when querying (optional)
     - parameter include: (query) A list of comma-separated related models to include (optional)
     - returns: RequestBuilder<PaginatedSigninsList> 
     */
    open class func getSigninsWithRequestBuilder(locationIds: String? = nil, withColours: String? = nil, query: String? = nil, withAcknowledged: Bool? = nil, withSignedIn: Bool? = nil, signinBefore: Date? = nil, signinAfter: Date? = nil, limit: Int? = nil, offset: Int? = nil, querySort: QuerySort_getSignins? = nil, include: String? = nil) -> RequestBuilder<PaginatedSigninsList> {
        let path = "/signins"
        let URLString = GuestSDKAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "location_ids": locationIds?.encodeToJSON(), 
            "with_colours": withColours?.encodeToJSON(), 
            "query": query?.encodeToJSON(), 
            "with_acknowledged": withAcknowledged?.encodeToJSON(), 
            "with_signed_in": withSignedIn?.encodeToJSON(), 
            "signin_before": signinBefore?.encodeToJSON(), 
            "signin_after": signinAfter?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "query_sort": querySort?.encodeToJSON(), 
            "include": include?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<PaginatedSigninsList>.Type = GuestSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Signin attribute
     
     - parameter signinId: (path)  
     - parameter signinUpdateParams: (body) The only updatable values for a &#x60;Signin&#x60; are &#x60;badge_number&#x60;, &#x60;badge_returned&#x60;, &#x60;is_accounted_for&#x60;, &#x60;is_signed_out&#x60;, and &#x60;is_acknowledged&#x60;.  &#x60;is_signed_out&#x60; and &#x60;is_acknowledged&#x60; are pseudo attributes that once set to true, are irreversible. 
     - parameter idempotencyKey: (header) An optional idempotency key to allow for repeat API requests. Any API request with this key will only be executed once, no matter how many times it&#39;s submitted. We store idempotency keys for only 24 hours. Any &#x60;Idempotency-Key&#x60; shorter than 10 characters will be ignored (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result
     */
    open class func updateSignin(signinId: String, signinUpdateParams: SigninUpdateParams, idempotencyKey: String? = nil, apiResponseQueue: DispatchQueue = GuestSDKAPI.apiResponseQueue, completion: @escaping ((_ result: Result<SigninDetail, Error>) -> Void)) {
        updateSigninWithRequestBuilder(signinId: signinId, signinUpdateParams: signinUpdateParams, idempotencyKey: idempotencyKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(.success(response.body!))
            case let .failure(error):
                completion(.failure(error))
            }
        }
    }

    /**
     Update a Signin attribute
     - PUT /signins/{signin_id}
     - Update, acknowledge, or `Signout` a `Signin`
     - :
       - type: openIdConnect
       - name: TractionGuestAuth
     - parameter signinId: (path)  
     - parameter signinUpdateParams: (body) The only updatable values for a &#x60;Signin&#x60; are &#x60;badge_number&#x60;, &#x60;badge_returned&#x60;, &#x60;is_accounted_for&#x60;, &#x60;is_signed_out&#x60;, and &#x60;is_acknowledged&#x60;.  &#x60;is_signed_out&#x60; and &#x60;is_acknowledged&#x60; are pseudo attributes that once set to true, are irreversible. 
     - parameter idempotencyKey: (header) An optional idempotency key to allow for repeat API requests. Any API request with this key will only be executed once, no matter how many times it&#39;s submitted. We store idempotency keys for only 24 hours. Any &#x60;Idempotency-Key&#x60; shorter than 10 characters will be ignored (optional)
     - returns: RequestBuilder<SigninDetail> 
     */
    open class func updateSigninWithRequestBuilder(signinId: String, signinUpdateParams: SigninUpdateParams, idempotencyKey: String? = nil) -> RequestBuilder<SigninDetail> {
        var path = "/signins/{signin_id}"
        let signinIdPreEscape = "\(APIHelper.mapValueToPathItem(signinId))"
        let signinIdPostEscape = signinIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{signin_id}", with: signinIdPostEscape, options: .literal, range: nil)
        let URLString = GuestSDKAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signinUpdateParams)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Idempotency-Key": idempotencyKey?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SigninDetail>.Type = GuestSDKAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
